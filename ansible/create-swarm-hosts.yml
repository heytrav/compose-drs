---
- name: Deploy three networked host machines as swarm nodes
  hosts: localhost
  roles: [catalystcloud]
  gather_facts: true
  tags:
    - provision
  vars:
    env_name: "staging"
  tasks:

    - include: tasks/pre-flight-variables.yml

    - name: Connect to Catalyst Cloud
      os_auth:


    - include: roles/catalystcloud/tasks/create-keypair.yml
    - name: Create Network
      os_network:
        name: "{{ cc_network_name }}"
        state: present

    - name: Create subnet
      os_subnet:
        name: "{{ cc_subnet_name }}"
        network_name: "{{ cc_network_name }}"
        state: present
        cidr: "{{ cc_subnet_cidr }}"
        allocation_pool_start: "{{ cc_subnet_dhcp_start }}"
        allocation_pool_end: "{{ cc_subnet_dhcp_end }}"
        ip_version: 4

    - name: Create router
      os_router:
        state: present
        name: "{{ cc_router_name }}"
        network: "{{ cc_public_net_name }}"
        interfaces:
          - "{{ cc_subnet_name }}"

    - include: roles/catalystcloud/tasks/create-security-groups.yml
    - include: tasks/create-servers.yml

    - wait_for:
       host: "{{ hostvars[item.name].ansible_host }}"
       port: 22
      with_items: "{{ cc_servers }}"
      tags: wait_for

    - name: Remove floating ips from known_hosts
      known_hosts:
        name: "{{ item.ip }}"
        state: absent
      with_items: "{{ cc_floating_ips }}"

    - name: Add newly created hosts to local ~/.ssh/config
      tags: local-changes
      blockinfile:
        dest: "{{ ansible_env.HOME }}/.ssh/config"
        insertbefore: BOF
        block: |
          Host {{ hostvars[item.name].ansible_host }}
              User ubuntu
              StrictHostKeyChecking no
          Host {{ item.name }}
              Hostname {{ hostvars[item.name].ansible_host }}
              User ubuntu
              StrictHostKeyChecking no
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item.name }}"
      with_items: "{{ cc_servers }}"

    - name: Add newly created hosts to /etc/hosts
      tags: local-changes
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ hostvars[item.name]['ansible_host'] }} {{ item.name }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item.name }}"
      with_items: "{{ cc_servers }}"


- name: Install python on new hosts
  hosts: "{{ env_name }}"
  become: yes
  roles: [common]
  gather_facts: false
  tags:
    - provision
    - firstonly
  tasks:
    - include: roles/common/tasks/install-python.yml


- name: Install Docker on swarm hosts
  hosts: "{{ env_name }}"
  tags: 
    - docker
  become: yes
  gather_facts: true
  vars:
    ansible_python_interpreter: /usr/bin/python
  tasks:
    - name: Add NZ locale to instances
      locale_gen: 
        name: en_NZ.UTF-8
        state: present

    - name: Add entry to /etc/hosts for all instances
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].fixed_ip }} item"
      with_items: "{{ groups[env_name] }}"


    - name: Apt dist upgrade
      apt:
        upgrade: dist
        autoremove: yes

    - name: Install packages required for docker
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - apt-transport-https
        - ca-certificates
        - "linux-image-extra-{{ ansible_kernel }}"
        - linux-image-extra-virtual

    - name: Add Dockers official GPG key
      block:
        - name: Install gpg key for ubuntu from docker.com
          apt_key:
            url: "https://download.docker.com/linux/ubuntu/gpg"
            state: present
      rescue:
        - name: Install gpg key for ubuntu using local version.
          apt_key:
            data: "{{ lookup('file', 'files/docker.asc') }}"
            state: present


    - name: Get os release name
      command: lsb_release -cs
      register: ubuntu_release

    - name: Output ubuntu release
      debug:
        msg: "Ubuntu release version {{ ubuntu_release.stdout }}"

    - name: Add repo for Docker CE
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ubuntu_release.stdout }} stable"
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Create a docker group
      group:
        name: docker
        state: present

    - name: Install docker community edition
      apt:
        name: docker-ce
        state: latest
      notify:
        - start docker

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        append: yes
        groups: docker

  handlers:
    - name: start docker
      service:
        name: docker
        state: started


- name: Setup swarm cluster
  hosts: "primary_manager:&{{ env_name }}"
  tags: 
    - swarm 
    - init
  tasks:
    - name: Initiate swarm on host
      command: docker swarm init
      register: swarm_init_result
      ignore_errors: true
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"
      failed_when: "swarm_init_result.rc == 1 and 'node is already part of a swarm' not in swarm_init_result.stderr"

    - name: Fetch manager token
      command: docker swarm join-token manager
      register: manager_token_output

    - name: Set manager token
      set_fact:
        manager_join_token: "{{ manager_token_output.stdout_lines[2] }}"

    - name: Fetch worker token
      command: docker swarm join-token worker
      register: worker_token_output

    - name: Set worker token
      set_fact:
        worker_join_token: "{{ worker_token_output.stdout_lines[2] }}"


- name: Set up alternate managers
  hosts: "{{ env_name }}:&manager:!primary_manager"
  tags:
    - swarm
    - manager
  tasks:

    - name: Run manager token on alternate managers
      command: "{{ hostvars[primary_manager].manager_join_token }}"
      ignore_errors: true
      register: manager_join_result
      changed_when: "'node joined a swarm' in manager_join_result.stdout"
      failed_when: "manager_join_result.rc == 1 and 'node is already part of a swarm' not in manager_join_result.stderr"



- name: Set up workers
  hosts: "{{ env_name }}:&worker"
  tags:
    - swarm
    - worker
  tasks:
    - name: Apply join token to workers
      command: "{{ hostvars[primary_manager].worker_join_token }}"
      register: worker_join_result
      ignore_errors: true
      changed_when: "'node joined a swarm' in worker_join_result.stdout"
      failed_when: "worker_join_result.rc == 1 and 'node is already part of a swarm' not in worker_join_result.stderr"
