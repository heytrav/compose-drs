---
- name: Deploy three networked host machines as swarm nodes
  hosts: localhost
  roles: [catalystcloud]
  gather_facts: true
  vars:
    env_name: "staging"
  tasks:

    - include: tasks/pre-flight-variables.yml

    - name: Connect to Catalyst Cloud
      os_auth:


    - include: roles/catalystcloud/tasks/create-keypair.yml
    - name: Create Network
      os_network:
        name: "{{ cc_network_name }}"
        state: present

    - name: Create subnet
      os_subnet:
        name: "{{ cc_subnet_name }}"
        network_name: "{{ cc_network_name }}"
        state: present
        cidr: "{{ cc_subnet_cidr }}"
        allocation_pool_start: "{{ cc_subnet_dhcp_start }}"
        allocation_pool_end: "{{ cc_subnet_dhcp_end }}"
        ip_version: 4

    - name: Create router
      os_router:
        state: present
        name: "{{ cc_router_name }}"
        network: "{{ cc_public_net_name }}"
        interfaces:
          - "{{ cc_subnet_name }}"

    - include: roles/catalystcloud/tasks/create-security-groups.yml
    - include: roles/catalystcloud/tasks/create-servers.yml

    - name: Add newly created hosts to local ~/.ssh/config
      tags: local-changes
      blockinfile:
        dest: "{{ ansible_env.HOME }}/.ssh/config"
        insertbefore: BOF
        block: |
          Host {{ item.name }}
              Hostname {{ hostvars[item.name].ansible_host }}
              User ubuntu
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item.name }}"
      with_items: "{{ cc_servers }}"

    - name: Add newly created hosts to /etc/hosts
      tags: local-changes
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ hostvars[item.name]['ansible_host'] }} {{ item.name }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item.name }}"
      with_items: "{{ cc_servers }}"

    - wait_for:
       host: "{{ hostvars[item.name].ansible_host }}"
       port: 22
      with_items: "{{ cc_servers }}"


- name: Install python on new hosts
  hosts: "{{ env_name }}"
  become: yes
  roles: [common]
  gather_facts: true
  tasks:
    - include: roles/common/tasks/install-python.yml


- name: Install Docker on swarm hosts
  hosts: "{{ env_name }}"
  become: yes
  tasks:

    - name: Add entry to /etc/hosts for all instances
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].fixed_ip }} item"
      with_items: "{{ groups[env_name] }}"


    - name: Apt dist upgrade
      apt:
        upgrade: dist
        autoremove: yes

    - name: Install packages required for docker
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - apt-transport-https
        - ca-certificates
        - "linux-image-extra-{{ ansible_kernel }}"
        - linux-image-extra-virtual

    - name: Add Dockers official GPG key
      block:
        - name: Install gpg key for ubuntu from docker.com
          apt_key:
            url: "https://download.docker.com/linux/ubuntu/gpg"
            state: present
      rescue:
        - name: Install gpg key for ubuntu using local version.
          apt_key:
            data: "{{ lookup('file', 'files/docker.asc') }}"
            state: present


    - name: Get os release name
      command: lsb_release -cs
      register: ubuntu_release

    - name: Output ubuntu release
      debug:
        msg: "Ubuntu release version {{ ubuntu_release.stdout }}"

    - name: Add repo for Docker CE
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ubuntu_release.stdout }} stable"
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Create a docker group
      group:
        name: docker
        state: present

    - name: Install docker community edition
      apt:
        name: docker-ce
        state: latest
      notify:
        - start docker

    - name: Add "{{ lookup('env', 'USER') }}" user to docker group
      user:
        name: "{{ lookup('env', 'USER') }}"
        append: yes
        groups: docker

  handlers:
    - name: start docker
      service:
        name: docker
        state: started


