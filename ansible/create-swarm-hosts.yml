---
- include: preflight.yml

- name: Deploy set of networked host machines as swarm nodes
  hosts: localhost
  roles: [catalystcloud]
  gather_facts: false
  tags:
    - provision
    - cloud
  vars:
    env_name: "staging"
    host_set: "{{ groups[env_name] | default([env_name]) }}"
    cc_servers: "{{ host_set|map('extract', hostvars, 'server_spec') | list }}"
    cc_subnet_prefix: "{{ host_set | map('extract', hostvars, 'cc_subnet_prefix') | unique | list | first }}"
    cc_security_groups: "{{ host_set| map('extract', hostvars, 'security_groups') |sum(start=[]) | unique | list }}"
    cc_security_group_names: "{{ cc_security_groups | map(attribute='group') | unique | list }}"
  tasks:

    - include: tasks/cc-create-stack.yml


- name: Basic host setup
  hosts: "{{ env_name }}:&catalystcloud"
  become: true
  roles: [catalystcloud,common]
  gather_facts: false
  vars: 
    host_set: "{{ groups[env_name] | default([env_name]) }}"
    cc_servers: "{{ host_set|map('extract', hostvars, 'server_spec') | list }}"
  tags:
    - basic
  pre_tasks:
    - name: Remove floating ip from known hosts
      delegate_to: localhost
      known_hosts:
        name: "{{ ansible_host }}"
        state: absent

    - name: "Add {{ inventory_hostname }} to local ~/.ssh/config"
      delegate_to: localhost
      tags: local-changes
      blockinfile:
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        insertbefore: BOF
        block: |
          Host {{ inventory_hostname }}
              User {{ cc_ssh_user }}
              StrictHostKeyChecking no
          Host {{ ansible_host }}
              Hostname {{ inventory_hostname }}
              User {{ cc_ssh_user }}
              StrictHostKeyChecking no
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"

    - name: "Add {{ inventory_hostname }} to /etc/hosts"
      delegate_to: localhost
      tags: local-changes
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ ansible_host }} {{ inventory_hostname }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"


    - debug:
        var: cc_ssh_user

    - name: Update apt cache
      raw: apt update -y

    - include: roles/common/tasks/install-python.yml

  tasks:
    - name: Gather facts
      setup:

    - include: roles/catalystcloud/tasks/setup-lvm.yml

- name: Install Docker on swarm hosts
  hosts: "{{ env_name }}"
  roles: [docker]
  vars:
    host_set: "{{ groups[env_name] | default([env_name]) }}"
  tags: 
    - docker
    - cloud
  become: yes
  pre_tasks:
    - name: Add NZ locale to instances
      locale_gen: 
        name: en_NZ.UTF-8
        state: present

    - name: Add entry to /etc/hosts for all instances
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].fixed_ip }} {{ item }}"
      with_items: "{{ host_set }}"


- name: Setup swarm cluster
  hosts: "primary_manager:&{{ env_name }}"
  become: yes
  tags: 
    - swarm 
    - init
  tasks:
    - debug:
        var: swarm_init_extra_args

    - name: Initiate swarm on host 
      command: docker swarm init {{ swarm_init_extra_args | d() }}
      register: swarm_init_result
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"
      failed_when: "swarm_init_result.rc == 1 and 'node is already part of a swarm' not in swarm_init_result.stderr"

    - name: Fetch manager token
      command: docker swarm join-token manager
      register: manager_token_output

    - name: Set manager token
      set_fact:
        manager_join_token: "{{ manager_token_output.stdout_lines[2] }}"

    - name: Fetch worker token
      command: docker swarm join-token worker
      register: worker_token_output

    - name: Set worker token
      set_fact:
        worker_join_token: "{{ worker_token_output.stdout_lines[2] }}"


- name: Set up alternate managers
  hosts: "{{ env_name }}:&manager:!primary_manager"
  become: yes
  vars:
    host_set: "{{ groups[env_name] | default([env_name]) }}"
    primary_manager: "{{ host_set |intersect(groups['primary_manager'])|first }}"
  tags:
    - swarm
    - manager
  tasks:

    - name: Run manager token on alternate managers
      command: "{{ hostvars[primary_manager].manager_join_token }}"
      ignore_errors: true
      register: manager_join_result
      changed_when: "'node joined a swarm' in manager_join_result.stdout"
      failed_when: "manager_join_result.rc == 1 and 'node is already part of a swarm' not in manager_join_result.stderr"



- name: Set up workers
  hosts: "{{ env_name }}:&worker"
  become: yes
  vars:
    host_set: "{{ groups[env_name] | default([env_name]) }}"
    primary_manager: "{{ host_set |intersect(groups['primary_manager'])|first }}"
  tags:
    - swarm
    - worker
  tasks:
    - name: Apply join token to workers
      command: "{{ hostvars[primary_manager].worker_join_token }}"
      register: worker_join_result
      ignore_errors: true
      changed_when: "'node joined a swarm' in worker_join_result.stdout"
      failed_when: "worker_join_result.rc == 1 and 'node is already part of a swarm' not in worker_join_result.stderr"

- name: Set labels on db nodes
  hosts: "primary_manager:&{{ env_name }}"
  become: yes
  vars:
    host_set: "{{ groups[env_name] | default([env_name]) }}"
  tags: 
    - swarm 
    - init
    - labels
  tasks:
    - name: Set db nodes with database role
      command: docker node update --label-add role=database {{ item }}
      with_items: "{{ host_set | intersect(groups['database']) }}"
