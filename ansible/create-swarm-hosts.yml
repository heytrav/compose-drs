---
- name: Deploy set of networked host machines as swarm nodes
  hosts: localhost
  roles: [catalystcloud]
  gather_facts: true
  tags:
    - provision
  vars:
    env_name: "staging"
  tasks:

    - include_vars:
        dir: 'group_vars/{{ env_name }}'

    - include_vars:
        dir: 'group_vars/database'
        name: db

    - include: tasks/pre-flight-variables.yml

    - include: tasks/cc-create-stack.yml


    - name: Add newly created hosts to local ~/.ssh/config
      tags: local-changes
      blockinfile:
        dest: "{{ ansible_env.HOME }}/.ssh/config"
        insertbefore: BOF
        block: |
          Host {{ hostvars[item.name].ansible_host }}
              User ubuntu
              StrictHostKeyChecking no
          Host {{ item.name }}
              Hostname {{ hostvars[item.name].ansible_host }}
              User ubuntu
              StrictHostKeyChecking no
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item.name }}"
      with_items: "{{ cc_servers }}"

    - name: Add newly created hosts to /etc/hosts
      tags: local-changes
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ hostvars[item.name]['ansible_host'] }} {{ item.name }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item.name }}"
      with_items: "{{ cc_servers }}"


- name: Install python on new hosts
  hosts: "{{ env_name }}"
  become: yes
  roles: [common]
  gather_facts: false
  tags:
    - provision
    - firstonly
  tasks:
    - include: roles/common/tasks/install-python.yml

- name: Basic host setup
  hosts: "{{ env_name }}"
  become: true
  roles: [catalystcloud]
  gather_facts: true
  tasks:
    - name: Create cc_servers list
      set_fact:
        cc_servers: "{{ [{'name': '{{ appliance_name }}', 'ip': '{{ hostvars[ansible_hostname].ansible_host }}'} | combine(appliance_default, recursive=True)] }}"

    - include: roles/catalystcloud/tasks/setup-lvm.yml

- name: Install Docker on swarm hosts
  hosts: "{{ env_name }}"
  roles: [docker]
  tags: 
    - docker
  become: yes
  gather_facts: true
  vars:
    ansible_python_interpreter: /usr/bin/python
  pre_tasks:
    - name: Add NZ locale to instances
      locale_gen: 
        name: en_NZ.UTF-8
        state: present

  post_tasks:
    - name: Add entry to /etc/hosts for all instances
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].fixed_ip }} item"
      with_items: "{{ groups[env_name] }}"

- name: Setup swarm cluster
  hosts: "primary_manager:&{{ env_name }}"
  tags: 
    - swarm 
    - init
  tasks:
    - name: Initiate swarm on host
      command: docker swarm init
      register: swarm_init_result
      ignore_errors: true
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"
      failed_when: "swarm_init_result.rc == 1 and 'node is already part of a swarm' not in swarm_init_result.stderr"

    - name: Fetch manager token
      command: docker swarm join-token manager
      register: manager_token_output

    - name: Set manager token
      set_fact:
        manager_join_token: "{{ manager_token_output.stdout_lines[2] }}"

    - name: Fetch worker token
      command: docker swarm join-token worker
      register: worker_token_output

    - name: Set worker token
      set_fact:
        worker_join_token: "{{ worker_token_output.stdout_lines[2] }}"


- name: Set up alternate managers
  hosts: "{{ env_name }}:&manager:!primary_manager"
  tags:
    - swarm
    - manager
  tasks:

    - name: Run manager token on alternate managers
      command: "{{ hostvars[primary_manager].manager_join_token }}"
      ignore_errors: true
      register: manager_join_result
      changed_when: "'node joined a swarm' in manager_join_result.stdout"
      failed_when: "manager_join_result.rc == 1 and 'node is already part of a swarm' not in manager_join_result.stderr"



- name: Set up workers
  hosts: "{{ env_name }}:&worker"
  tags:
    - swarm
    - worker
  tasks:
    - name: Apply join token to workers
      command: "{{ hostvars[primary_manager].worker_join_token }}"
      register: worker_join_result
      ignore_errors: true
      changed_when: "'node joined a swarm' in worker_join_result.stdout"
      failed_when: "worker_join_result.rc == 1 and 'node is already part of a swarm' not in worker_join_result.stderr"
