---

base_directory: ~/workspace/innovation/compose-drs
images:
  rabbitmq:
    image: quay.io/heytrav/rabbitmq
    tag: latest
  mariadb:
    image: mysql
    tag: latest
  api:
    image: quay.io/heytrav/domain-api
    tag: 1.2.20
  nodepp:
    image: quay.io/heytrav/nodepp
    tag: 1.2.5
  nginx:
    image: quay.io/heytrav/drs-nginx
    tag: 0.1.0
  memcached:
    image: memcached
    tag: latest

service_list:
  rabbitmq:
    environment:
      RABBITMQ_HOST: "{{ rabbitmq_host  }}"
      RABBITMQ_PORT: "{{ rabbitmq_port  }}"
      RABBITMQ_DEFAULT_USER: "{{ rabbitmq_default_user  }}"
      RABBITMQ_DEFAULT_PASS: "{{ rabbitmq_default_pass  }}"
      RABBITMQ_DEFAULT_VHOST: "{{ rabbitmq_default_vhost  }}"
      RABBITMQ_ERLANG_COOKIE: "{{ rabbitmq_erlang_cookie  }}"
    image: "{{ images.rabbitmq.image  }}:{{ images.rabbitmq.tag  }}"
    ports:
      - 15672:15672

  domaindb:
    image: "{{ images.mariadb.image  }}:{{ images.mariadb.tag  }}"
    environment:
      MYSQL_USER_FILE: /run/secrets/mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_DATABASE_FILE: /run/secrets/mysql_database
    ports:
      - 3306:3306
    secrets:
      - mysql_password
      - mysql_root_password
      - mysql_database
      - mysql_user
    volumes:
      - ../database/mysql:/var/lib/mysql
  celery:
    image: "{{ images.api.image  }}:{{ images.api.tag  }}"
    command: ["celery", "-A", "application", "worker", "-l", "info"]
    volumes:
      - ../drs-project:/usr/local/domain-api
    depends_on:
      - rabbitmq
    environment:
      RELEASE_VERSION: "{{ images.api.tag  }}"
      RABBITMQ_HOST: "{{ rabbitmq_host  }}"
      RABBITMQ_PORT: "{{ rabbitmq_port  }}"
      RABBITMQ_DEFAULT_USER: "{{ rabbitmq_default_user  }}"
      RABBITMQ_DEFAULT_PASS: "{{ rabbitmq_default_pass  }}"
      RABBITMQ_DEFAULT_VHOST: "{{ rabbitmq_default_vhost  }}"
      RABBITMQ_ERLANG_COOKIE: "{{ rabbitmq_erlang_cookie  }}"
      SENTRY_ENVIRONMENT: "{{ sentry_environment }}"
      SENTRY_DSN_FILE: /run/secrets/celery_sentry_dsn
      MYSQL_USER_FILE: /run/secrets/mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_DATABASE_FILE: /run/secrets/mysql_database
      DJANGO_SECRET_KEY_FILE: /run/secrets/django_secret_key
      JWT_SECRET_KEY_FILE: /run/secrets/jwt_secret_key
      LOGZIO_TOKEN_FILE: /run/secrets/logzio_token
    secrets:
      - mysql_database
      - mysql_user
      - mysql_password
      - celery_sentry_dsn
      - django_secret_key
      - jwt_secret_key
      - logzio_token
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s

  centralnic:
    # nodepp config options
    name: centralnic-test
    config:
      host: epp-ote.centralnic.com
      port: 700
      ssl: true
      entities:
        - domain
        - contact
        - host
      extension:
        - DNSSEC
      extensionClasses:
        - extension: DNSSEC
          className: SecDnsExtension 
      namespaces:
        epp:
          xmlns: urn:ietf:params:xml:ns:epp-1.0
        domain:
          xmlns: urn:ietf:params:xml:ns:domain-1.0
        contact:
          xmlns: urn:ietf:params:xml:ns:contact-1.0
        host:
          xmlns: urn:ietf:params:xml:ns:host-1.0 
        DNSSEC:
          xmlns: urn:ietf:params:xml:ns:secDNS-1.1
    image: "{{ images.nodepp.image  }}:{{ images.nodepp.tag  }}"
    command: ["node", "./lib/rabbit-epp.js", "-j", "-f", "/run/secrets/centralnic_test_config", "-r", "centralnic-test", "--loglevel", "debug"]
    volumes:
      - ../nodepp:/opt/project/node-epp
    healthcheck: 
      test: ["CMD", "node", "./lib/healthcheck.js", "-j", "-f", "/run/secrets/centralnic_test_config", "-r", "centralnic-test", "--loglevel", "debug"]
      interval: 1m
      timeout: 20s
      retries: 3
    depends_on:
      - rabbitmq
    environment:
      EPP_LOGIN_FILE: /run/secrets/centralnic_test_login
      EPP_PASSWORD_FILE: /run/secrets/centralnic_test_password
      RELEASE_VERSION: "{{ images.nodepp.tag  }}"
      RABBITMQ_HOST: "{{ rabbitmq_host  }}"
      RABBITMQ_PORT: "{{ rabbitmq_port  }}"
      RABBITMQ_DEFAULT_USER: "{{ rabbitmq_default_user  }}"
      RABBITMQ_DEFAULT_PASS: "{{ rabbitmq_default_pass  }}"
      RABBITMQ_DEFAULT_VHOST: "{{ rabbitmq_default_vhost  }}"
      RABBITMQ_ERLANG_COOKIE: "{{ rabbitmq_erlang_cookie  }}"
    secrets:
      - centralnic_test_login
      - centralnic_test_password
      - centralnic_test_config
      - nodepp_sentry_dsn
      - logzio_token
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause

  cocca:
    # nodepp config options
    name: cocca-test
    config:
      host: ote.coccaregistry.org
      port: 700
      ssl: true
      entities:
        - domain
        - contact
        - host
      extension:
        - DNSSEC
      extensionClasses:
        - extension: DNSSEC
          className: SecDnsExtension 
      namespaces:
        epp:
          xmlns: urn:ietf:params:xml:ns:epp-1.0
        domain:
          xmlns: urn:ietf:params:xml:ns:domain-1.0
        contact:
          xmlns: urn:ietf:params:xml:ns:contact-1.0
        host:
          xmlns: urn:ietf:params:xml:ns:host-1.0 
        DNSSEC:
          xmlns: urn:ietf:params:xml:ns:secDNS-1.1
    image: "{{ images.nodepp.image  }}:{{ images.nodepp.tag  }}"
    command: ["node", "./lib/rabbit-epp.js", "-j", "-f", "/run/secrets/cocca_test_config", "-r", "cocca-test", "--loglevel", "debug"]
    volumes:
      - ../nodepp:/opt/project/node-epp
    healthcheck: 
      test: ["CMD", "node", "./lib/healthcheck.js", "-j", "-f", "/run/secrets/cocca_test_config", "-r", "cocca-test", "--loglevel", "debug"]
      interval: 1m
      timeout: 20s
      retries: 3
    depends_on:
      - rabbitmq
    environment:
      EPP_LOGIN_FILE: /run/secrets/cocca_test_login
      EPP_PASSWORD_FILE: /run/secrets/cocca_test_password
      RELEASE_VERSION: "{{ images.nodepp.tag  }}"
      RABBITMQ_HOST: "{{ rabbitmq_host  }}"
      RABBITMQ_PORT: "{{ rabbitmq_port  }}"
      RABBITMQ_DEFAULT_USER: "{{ rabbitmq_default_user  }}"
      RABBITMQ_DEFAULT_PASS: "{{ rabbitmq_default_pass  }}"
      RABBITMQ_DEFAULT_VHOST: "{{ rabbitmq_default_vhost  }}"
      RABBITMQ_ERLANG_COOKIE: "{{ rabbitmq_erlang_cookie  }}"
    secrets:
      - cocca_test_login
      - cocca_test_password
      - cocca_test_config
      - nodepp_sentry_dsn
      - logzio_token
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause

  migrate:
    image: "{{ images.api.image  }}:{{ images.api.tag  }}"
    command: ["python3", "manage.py", "migrate"]
    volumes:
      - ../drs-project:/usr/local/domain-api
    depends_on:
      - domaindb
    environment:
      SENTRY_DSN_FILE: /run/secrets/domain_api_sentry_dsn
      RELEASE_VERSION: "{{ images.api.tag  }}"
      RABBITMQ_HOST: "{{ rabbitmq_host  }}"
      RABBITMQ_PORT: "{{ rabbitmq_port  }}"
      RABBITMQ_DEFAULT_USER: "{{ rabbitmq_default_user  }}"
      RABBITMQ_DEFAULT_PASS: "{{ rabbitmq_default_pass  }}"
      RABBITMQ_DEFAULT_VHOST: "{{ rabbitmq_default_vhost  }}"
      RABBITMQ_ERLANG_COOKIE: "{{ rabbitmq_erlang_cookie  }}"
      SENTRY_ENVIRONMENT: "{{ sentry_environment }}"
      MYSQL_USER_FILE: /run/secrets/mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_DATABASE_FILE: /run/secrets/mysql_database
      DJANGO_SECRET_KEY_FILE: /run/secrets/django_secret_key
      JWT_SECRET_KEY_FILE: /run/secrets/jwt_secret_key
      LOGZIO_TOKEN_FILE: /run/secrets/logzio_token
    secrets:
      - mysql_database
      - mysql_user
      - mysql_password
      - django_secret_key
      - jwt_secret_key
      - logzio_token
      - domain_api_sentry_dsn
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 1

  api:
    image: "{{ images.api.image  }}:{{ images.api.tag  }}"
    command: ["python3", "manage.py", "runserver", "0.0.0.0:8000"]
    #command: ["gunicorn", "application.wsgi", "-w", "1", "-b", "0.0.0.0:8000"]
    volumes:
      - ../drs-project:/usr/local/domain-api
    depends_on:
      - rabbitmq
      - domaindb
    environment:
      SENTRY_DSN_FILE: /run/secrets/domain_api_sentry_dsn
      RELEASE_VERSION: "{{ images.api.tag  }}"
      RABBITMQ_HOST: "{{ rabbitmq_host  }}"
      RABBITMQ_PORT: "{{ rabbitmq_port  }}"
      RABBITMQ_DEFAULT_USER: "{{ rabbitmq_default_user  }}"
      RABBITMQ_DEFAULT_PASS: "{{ rabbitmq_default_pass  }}"
      RABBITMQ_DEFAULT_VHOST: "{{ rabbitmq_default_vhost  }}"
      RABBITMQ_ERLANG_COOKIE: "{{ rabbitmq_erlang_cookie  }}"
      SENTRY_ENVIRONMENT: "{{ sentry_environment }}"
      MYSQL_USER_FILE: /run/secrets/mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_DATABASE_FILE: /run/secrets/mysql_database
      DJANGO_SECRET_KEY_FILE: /run/secrets/django_secret_key
      JWT_SECRET_KEY_FILE: /run/secrets/jwt_secret_key
      LOGZIO_TOKEN_FILE: /run/secrets/logzio_token
    secrets:
      - mysql_database
      - mysql_user
      - mysql_password
      - domain_api_sentry_dsn
      - django_secret_key
      - jwt_secret_key
      - logzio_token
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
      restart_policy:
        condition: on-failure
        delay: 10s

  nginx:
    image: "{{ images.nginx.image  }}:{{ images.nginx.tag  }}"
    ports:
      - "443:443"
    secrets:
      - site.key
      - site.crt
    command: ["nginx"]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s

  memcached:
    image: "{{ images.memcached.image  }}:{{ images.memcached.tag  }}"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 64M

sentry_environment: development

# nodepp config
cocca_config:
  host: ote.coccaregistry.org
  entities:
    - domain
    - contact
    - host

celery_sentry_dsn: vault_celery_sentry_dsn
domain_api_sentry_dsn: vault_domain_api_sentry_dsn
nodepp_sentry_dsn: vault_nodepp_sentry_dsn
django_secret_key: vault_django_secret_key
jwt_secret_key: vault_jwt_secret_key
logzio_token: vault_logzio_token
rabbitmq_default_user: vault_rabbitmq_default_user
rabbitmq_default_pass: vault_rabbitmq_default_pass
rabbitmq_erlang_cookie: vault_rabbitmq_erlang_cookie
cocca_login: vault_cocca_login
cocca_password: vault_cocca_password
centralnic_login: vault_centralnic_login
centralnic_password: vault_centralnic_password
mysql_user: vault_mysql_user
mysql_password: vault_mysql_password
mysql_database: vault_mysql_database
site_crt: vault_site_crt
site_key: vault_site_key
